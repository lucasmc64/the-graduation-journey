/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotelinfernava.home;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lucasmc64
 */
public class HotelInfernava extends javax.swing.JFrame {

    // Estou usando o driver 42.3.0 e Postgresql em sua versão 12
    private String url = "jdbc:postgresql://localhost:5432/infernava";
    private String username = "lucasmc64";
    private String password = "Oceania06";
    private DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    /**
     * Creates new form HotelInfernava
     */
    public HotelInfernava() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogAbout = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tabbedPanel = new javax.swing.JTabbedPane();
        pnlHome = new javax.swing.JPanel();
        lblHotelName = new javax.swing.JLabel();
        lblSlogan = new javax.swing.JLabel();
        btnAbout = new javax.swing.JButton();
        pnlAccommodations = new javax.swing.JPanel();
        lblNumber = new javax.swing.JLabel();
        spnNumber = new javax.swing.JSpinner();
        lblCategory = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox<>();
        lblCost = new javax.swing.JLabel();
        spnCost = new javax.swing.JSpinner();
        lblCapacity = new javax.swing.JLabel();
        spnCapacity = new javax.swing.JSpinner();
        lblStatus = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        btnSaveAccommodation = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAccommodations = new javax.swing.JTable();
        pnlGuests = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblCpfGuest = new javax.swing.JLabel();
        txtCpfGuest = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        spnAge = new javax.swing.JSpinner();
        btnSaveGuest = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblGuests = new javax.swing.JTable();
        pnlReserves = new javax.swing.JPanel();
        lblCpfReserve = new javax.swing.JLabel();
        txtCpfReserve = new javax.swing.JTextField();
        lblEntryDate = new javax.swing.JLabel();
        spnEntryDate = new javax.swing.JSpinner();
        lblDepartureDate = new javax.swing.JLabel();
        spnDepartureDate = new javax.swing.JSpinner();
        btnSaveReserve = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblReserves = new javax.swing.JTable();
        lblGuestsNumber = new javax.swing.JLabel();
        spnGuestsNumber = new javax.swing.JSpinner();
        lblAccomodationNumber = new javax.swing.JLabel();
        cmbAccomodationNumber = new javax.swing.JComboBox<>();
        pnlCheckOut = new javax.swing.JPanel();
        lblCpfCheckOut = new javax.swing.JLabel();
        txtCpfCheckOut = new javax.swing.JTextField();
        btnCheckOut = new javax.swing.JButton();

        dialogAbout.setMinimumSize(new java.awt.Dimension(480, 282));
        dialogAbout.setResizable(false);

        jLabel2.setFont(new java.awt.Font("Fira Sans", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sobre o Hotel");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("<html>\n  <body>\n    <p style=\"text-align: center\">\n      O nome Infernava, além de representar uma grande\n      <br /> \n      rede de hotéis, carrega consigo toda uma história,\n      <br /> \n      filosofia e estilo de vida. \n    </p>\n  </body>\n</html>");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("<html>\n  <body>\n    <p style=\"text-align: center\">\n      Oferecemos um refúgio a todos aqueles que desejam\n      <br /> \n      um pouco de paz, longe da cafeína, código mal identado e\n      <br /> \n      da Marília Mendonça.\n    </p>\n  </body>\n</html>");

        javax.swing.GroupLayout dialogAboutLayout = new javax.swing.GroupLayout(dialogAbout.getContentPane());
        dialogAbout.getContentPane().setLayout(dialogAboutLayout);
        dialogAboutLayout.setHorizontalGroup(
            dialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        dialogAboutLayout.setVerticalGroup(
            dialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogAboutLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblHotelName.setFont(new java.awt.Font("Fira Sans", 0, 48)); // NOI18N
        lblHotelName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHotelName.setText("Hotel Infernava");

        lblSlogan.setFont(new java.awt.Font("Fira Sans", 0, 18)); // NOI18N
        lblSlogan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSlogan.setText("ONDE O CAFÉ AMARGA");
        lblSlogan.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnAbout.setText("SOBRE");
        btnAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAboutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHomeLayout.createSequentialGroup()
                .addGap(388, 388, 388)
                .addComponent(btnAbout, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                .addGap(384, 384, 384))
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHotelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSlogan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(lblHotelName)
                .addGap(10, 10, 10)
                .addComponent(lblSlogan)
                .addGap(20, 20, 20)
                .addComponent(btnAbout)
                .addContainerGap(236, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Home", pnlHome);

        pnlAccommodations.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlAccommodationsComponentShown(evt);
            }
        });

        lblNumber.setText("Número");

        spnNumber.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        lblCategory.setText("Categoria");

        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "standard", "family", "top" }));

        lblCost.setText("Preço da diária (R$)");

        spnCost.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 1.0d));

        lblCapacity.setText("Capacidade");

        spnCapacity.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        lblStatus.setText("Status");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "livre", "ocupado" }));

        btnSaveAccommodation.setText("Adicionar acomodação");
        btnSaveAccommodation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAccommodationActionPerformed(evt);
            }
        });

        tblAccommodations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número", "Categoria", "Preço da diária (R$)", "Capacidade", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAccommodations);

        javax.swing.GroupLayout pnlAccommodationsLayout = new javax.swing.GroupLayout(pnlAccommodations);
        pnlAccommodations.setLayout(pnlAccommodationsLayout);
        pnlAccommodationsLayout.setHorizontalGroup(
            pnlAccommodationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccommodationsLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(pnlAccommodationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblStatus)
                    .addComponent(spnCapacity)
                    .addComponent(lblCapacity)
                    .addComponent(lblCost)
                    .addComponent(lblCategory)
                    .addComponent(lblNumber)
                    .addComponent(cmbCategory, 0, 200, Short.MAX_VALUE)
                    .addComponent(spnNumber)
                    .addComponent(spnCost)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAccommodationsLayout.createSequentialGroup()
                        .addComponent(btnSaveAccommodation)
                        .addGap(16, 16, 16)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );
        pnlAccommodationsLayout.setVerticalGroup(
            pnlAccommodationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccommodationsLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(pnlAccommodationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAccommodationsLayout.createSequentialGroup()
                        .addComponent(lblNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCategory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCapacity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSaveAccommodation)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Acomodações", pnlAccommodations);

        pnlGuests.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlGuestsComponentShown(evt);
            }
        });

        lblName.setText("Nome");

        lblCpfGuest.setText("CPF");

        lblAge.setText("Idade");

        spnAge.setModel(new javax.swing.SpinnerNumberModel(18, 18, null, 1));

        btnSaveGuest.setText("Salvar hóspede");
        btnSaveGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveGuestActionPerformed(evt);
            }
        });

        tblGuests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "CPF", "Idade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblGuests);

        javax.swing.GroupLayout pnlGuestsLayout = new javax.swing.GroupLayout(pnlGuests);
        pnlGuests.setLayout(pnlGuestsLayout);
        pnlGuestsLayout.setHorizontalGroup(
            pnlGuestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGuestsLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(pnlGuestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblAge)
                    .addComponent(lblCpfGuest)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(txtCpfGuest)
                    .addComponent(spnAge)
                    .addGroup(pnlGuestsLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btnSaveGuest)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );
        pnlGuestsLayout.setVerticalGroup(
            pnlGuestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGuestsLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(pnlGuestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlGuestsLayout.createSequentialGroup()
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCpfGuest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCpfGuest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblAge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSaveGuest)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Hóspedes", pnlGuests);

        pnlReserves.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlReservesComponentShown(evt);
            }
        });

        lblCpfReserve.setText("CPF");

        lblEntryDate.setText("Data de entrada");

        spnEntryDate.setModel(new javax.swing.SpinnerDateModel());

        lblDepartureDate.setText("Data de saída");

        spnDepartureDate.setModel(new javax.swing.SpinnerDateModel());

        btnSaveReserve.setText("Salvar reserva");
        btnSaveReserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveReserveActionPerformed(evt);
            }
        });

        tblReserves.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPF", "Entrada em", "Saída em", "Qtd hóspedes", "Acomodação", "CheckOut"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblReserves);

        lblGuestsNumber.setText("Número de hóspedes");

        spnGuestsNumber.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spnGuestsNumber.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnGuestsNumberStateChanged(evt);
            }
        });

        lblAccomodationNumber.setText("Acomodação");

        javax.swing.GroupLayout pnlReservesLayout = new javax.swing.GroupLayout(pnlReserves);
        pnlReserves.setLayout(pnlReservesLayout);
        pnlReservesLayout.setHorizontalGroup(
            pnlReservesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReservesLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(pnlReservesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlReservesLayout.createSequentialGroup()
                        .addGap(0, 27, Short.MAX_VALUE)
                        .addComponent(btnSaveReserve)
                        .addGap(100, 100, 100))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlReservesLayout.createSequentialGroup()
                        .addGroup(pnlReservesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAccomodationNumber, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDepartureDate, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGuestsNumber, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEntryDate, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCpfReserve, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlReservesLayout.createSequentialGroup()
                        .addGroup(pnlReservesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCpfReserve, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spnEntryDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(spnDepartureDate, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spnGuestsNumber, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbAccomodationNumber, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );
        pnlReservesLayout.setVerticalGroup(
            pnlReservesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReservesLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(pnlReservesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlReservesLayout.createSequentialGroup()
                        .addComponent(lblCpfReserve)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCpfReserve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblEntryDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnEntryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDepartureDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnDepartureDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblGuestsNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnGuestsNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblAccomodationNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbAccomodationNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSaveReserve)))
                .addGap(40, 40, 40))
        );

        tabbedPanel.addTab("Reservas", pnlReserves);

        lblCpfCheckOut.setText("CPF");

        btnCheckOut.setText("Sair do hotel");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCheckOutLayout = new javax.swing.GroupLayout(pnlCheckOut);
        pnlCheckOut.setLayout(pnlCheckOutLayout);
        pnlCheckOutLayout.setHorizontalGroup(
            pnlCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckOutLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(pnlCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCpfCheckOut)
                    .addComponent(txtCpfCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlCheckOutLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(btnCheckOut)))
                .addContainerGap(574, Short.MAX_VALUE))
        );
        pnlCheckOutLayout.setVerticalGroup(
            pnlCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckOutLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(lblCpfCheckOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCpfCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCheckOut)
                .addContainerGap(364, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Check-out", pnlCheckOut);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPanel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetAccommodationsPanelFields() {
        // Limpando campos
        spnNumber.setValue(0);
        cmbCategory.setSelectedIndex(0);
        spnCost.setValue(0);
        spnCapacity.setValue(1);
        cmbStatus.setSelectedIndex(0);
    }

    private void resetGuestsPanelFields() {
        // Limpando campos
        txtName.setText("");
        txtCpfGuest.setText("");
        spnAge.setValue(18);
    }

    private void resetReservesPanelFields() {
        DefaultTableModel accommodationsModel = (DefaultTableModel) tblAccommodations.getModel();

        // Limpando campos
        txtCpfReserve.setText("");
        spnEntryDate.setValue(new Date());
        spnDepartureDate.setValue(new Date());
        spnGuestsNumber.setValue(1);
        cmbAccomodationNumber.removeAllItems();

        for (int i = 0; i < accommodationsModel.getRowCount(); i++) {
            if (accommodationsModel.getValueAt(i, 4).toString().equalsIgnoreCase("livre")) {
                cmbAccomodationNumber.addItem("Quarto número " + accommodationsModel.getValueAt(i, 0));
            }
        }
    }
    
    private void resetCheckOutPanelFields() {
        // Limpando campos
        txtCpfCheckOut.setText("");
    }

    private void btnAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAboutActionPerformed
        dialogAbout.setVisible(true);
    }//GEN-LAST:event_btnAboutActionPerformed

    private void btnSaveAccommodationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAccommodationActionPerformed
        try {
            DefaultTableModel accommodationsModel = (DefaultTableModel) tblAccommodations.getModel();

            int number = Integer.parseInt(spnNumber.getValue().toString());

            for (int i = 0; i < accommodationsModel.getRowCount(); i++) {
                int storedNumber = (int) accommodationsModel.getValueAt(i, 0);

                if (storedNumber == number) {
                    throw new RuntimeException("Não é possível inserir uma acomodação já existente.");
                }
            }

            String category = (String) cmbCategory.getSelectedItem().toString();
            double cost = Double.parseDouble(spnCost.getValue().toString());

            if (cost == 0) {
                throw new RuntimeException("Por favor, insira um valor válido para o custo da reserva.");
            }

            int capacity = Integer.parseInt(spnCapacity.getValue().toString());
            String status = (String) cmbStatus.getSelectedItem().toString();

            // Adicionando à tabela
            accommodationsModel.addRow(new Object[]{number, category, cost, capacity, status});

            Connection connection = null;
            Statement statement = null;
            ResultSet resultSet = null;
            String query = "";

            try {
                Class.forName("org.postgresql.Driver");
                System.out.println("Driver OK");
            } catch (Exception e) {
                System.out.println(e);
                return;
            }

            try {
                connection = DriverManager.getConnection(url, username, password);
                statement = connection.createStatement();

                // Acomodação
                query = "INSERT INTO accommodation (number, category, cost, capacity, status) VALUES " + "(" + number + ",'" + category + "'," + cost + "," + capacity + ",'" + status + "')";
                statement.executeUpdate(query);
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }
                    if (statement != null) {
                        statement.close();
                    }
                } catch (SQLException ex) {
                    System.err.println(ex.getMessage());
                }
            }

            resetAccommodationsPanelFields();
        } catch (Exception error) {
            JOptionPane.showMessageDialog(null, error.getMessage(), "Ooops!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveAccommodationActionPerformed

    private void btnSaveGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveGuestActionPerformed
        try {
            DefaultTableModel guestsModel = (DefaultTableModel) tblGuests.getModel();

            String name = txtName.getText();

            if (name.isBlank()) {
                throw new RuntimeException("Por favor, insira o nome do cliente.");
            }

            String cpf = txtCpfGuest.getText();

            if (cpf.isBlank()) {
                throw new RuntimeException("Por favor, insira o CPF do cliente.");
            }

            for (int i = 0; i < guestsModel.getRowCount(); i++) {
                String storedCpf = (String) guestsModel.getValueAt(i, 1);

                if (storedCpf.equals(cpf)) {
                    throw new RuntimeException("Não é possível inserir um cliente já existente.");
                }
            }

            int age = Integer.parseInt(spnAge.getValue().toString());

            // Adicionando à tabela
            guestsModel.addRow(new Object[]{name, cpf, age});

            Connection connection = null;
            Statement statement = null;
            ResultSet resultSet = null;
            String query = "";

            try {
                Class.forName("org.postgresql.Driver");
                System.out.println("Driver OK");
            } catch (Exception e) {
                System.out.println(e);
                return;
            }

            try {
                connection = DriverManager.getConnection(url, username, password);
                statement = connection.createStatement();

                // Hóspede
                query = "INSERT INTO guest (name, cpf, age) VALUES " + "('" + name + "','" + cpf + "'," + age + ")";
                statement.executeUpdate(query);
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }
                    if (statement != null) {
                        statement.close();
                    }
                } catch (SQLException ex) {
                    System.err.println(ex.getMessage());
                }
            }

            resetGuestsPanelFields();
        } catch (Exception error) {
            JOptionPane.showMessageDialog(null, error.getMessage(), "Ooops!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveGuestActionPerformed

    private void btnSaveReserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveReserveActionPerformed
        try {
            DefaultTableModel reservesModel = (DefaultTableModel) tblReserves.getModel();
            DefaultTableModel accommodationsModel = (DefaultTableModel) tblAccommodations.getModel();

            String cpf = txtCpfReserve.getText();

            if (cpf.isBlank()) {
                throw new RuntimeException("Por favor, insira o CPF do cliente.");
            }

            for (int i = 0; i < reservesModel.getRowCount(); i++) {
                if (reservesModel.getValueAt(i, 0).toString().equals(cpf) && !Boolean.getBoolean(reservesModel.getValueAt(i, 5).toString())) {
                    throw new RuntimeException("Nosso sistema não suporta mais de uma reserva ativa por hóspede.");
                }
            }

            LocalDate entryDate = ((Date) spnEntryDate.getValue()).toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate departureDate = ((Date) spnDepartureDate.getValue()).toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

            if (!entryDate.isBefore(departureDate)) {
                throw new RuntimeException("A data de saída deve ser posterior a de entrada no hotel.");
            }

            int guestsQuantity = Integer.parseInt(spnGuestsNumber.getValue().toString());

            if (cmbAccomodationNumber.getItemCount() == 0) {
                throw new RuntimeException("Desculpe, não possuimos acomodações livres que comportam a quantidade de pessoas informada.");
            }

            String accommodation = (String) cmbAccomodationNumber.getSelectedItem().toString();
            int accommodationNumber = Integer.parseInt(accommodation.replaceAll("\\D", ""));

            // Adicionando à tabela
            reservesModel.addRow(new Object[]{cpf, entryDate.format(dateFormat), departureDate.format(dateFormat), guestsQuantity, accommodation, false});

            int rowIndex = 0;
            for (rowIndex = 0; rowIndex < accommodationsModel.getRowCount(); rowIndex++) {
                int number = (int) accommodationsModel.getValueAt(rowIndex, 0);

                if (number == accommodationNumber) {
                    break;
                }
            }

            accommodationsModel.setValueAt("ocupado", rowIndex, 4);

            Connection connection = null;
            Statement statement = null;
            ResultSet resultSet = null;
            String query = "";

            try {
                Class.forName("org.postgresql.Driver");
                System.out.println("Driver OK");
            } catch (Exception e) {
                System.out.println(e);
                return;
            }

            try {
                connection = DriverManager.getConnection(url, username, password);
                statement = connection.createStatement();

                // Reserva
                query = "INSERT INTO reserve (cpf, entryDate, departureDate, guestsQuantity, accommodationNumber) VALUES " + "('" + cpf + "','" + entryDate.toString() + "','" + departureDate.toString() + "'," + guestsQuantity + "," + accommodationNumber + ")";
                statement.executeUpdate(query);

                // Acomodação
                if (LocalDate.now().toString().equals(entryDate.toString())) {
                    query = "UPDATE accommodation SET status = 'ocupado' WHERE number = " + accommodationNumber;
                    statement.executeUpdate(query);
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }
                    if (statement != null) {
                        statement.close();
                    }
                } catch (SQLException ex) {
                    System.err.println(ex.getMessage());
                }
            }

            resetReservesPanelFields();
        } catch (Exception error) {
            JOptionPane.showMessageDialog(null, error.getMessage(), "Ooops!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveReserveActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        DefaultTableModel accommodationsModel = (DefaultTableModel) tblAccommodations.getModel();
        DefaultTableModel guestsModel = (DefaultTableModel) tblGuests.getModel();
        DefaultTableModel reservesModel = (DefaultTableModel) tblReserves.getModel();

        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String query = "";

        try {
            Class.forName("org.postgresql.Driver");
            System.out.println("Driver OK");
        } catch (Exception e) {
            System.out.println(e);
            return;
        }

        try {
            connection = DriverManager.getConnection(url, username, password);
            statement = connection.createStatement();

            /* Acomodações */
            query = "SELECT * FROM accommodation";
            resultSet = statement.executeQuery(query);

            while (resultSet.next()) {
                accommodationsModel.addRow(new Object[]{resultSet.getInt("number"), resultSet.getString("category"), resultSet.getDouble("cost"), resultSet.getInt("capacity"), resultSet.getString("status")});

                if (resultSet.getString("status").equalsIgnoreCase("livre")) {
                    cmbAccomodationNumber.addItem("Quarto número " + resultSet.getInt("number"));
                }
            }

            /* Hóspedes */
            query = "SELECT * FROM guest";
            resultSet = statement.executeQuery(query);

            while (resultSet.next()) {
                guestsModel.addRow(new Object[]{resultSet.getString("name"), resultSet.getString("cpf"), resultSet.getInt("age")});

            }

            /* Reservas */
            query = "SELECT * FROM reserve";
            resultSet = statement.executeQuery(query);

            while (resultSet.next()) {
                reservesModel.addRow(new Object[]{resultSet.getString("cpf"), LocalDate.parse(resultSet.getString("entryDate")).format(dateFormat), LocalDate.parse(resultSet.getString("departureDate")).format(dateFormat), resultSet.getInt("guestsQuantity"), resultSet.getString("accommodationNumber"), resultSet.getBoolean("checkOut")});
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException ex) {
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        try {
            DefaultTableModel reservesModel = (DefaultTableModel) tblReserves.getModel();
            DefaultTableModel guestsModel = (DefaultTableModel) tblGuests.getModel();
            DefaultTableModel accommodationsModel = (DefaultTableModel) tblAccommodations.getModel();

            String cpf = txtCpfCheckOut.getText();

            if (cpf.isBlank()) {
                throw new RuntimeException("Por favor, insira o CPF do cliente.");
            }

            int reserveRow = 0;
            for (reserveRow = 0; reserveRow < reservesModel.getRowCount(); reserveRow++) {
                if (reservesModel.getValueAt(reserveRow, 0).toString().equals(cpf) && !Boolean.getBoolean(reservesModel.getValueAt(reserveRow, 5).toString())) {
                    break;
                }
            }

            if (reserveRow >= reservesModel.getRowCount()) {
                throw new RuntimeException("Não existe reserva ativa para esse cliente para executar check-out.");
            }

            LocalDate entryDate = LocalDate.parse(reservesModel.getValueAt(reserveRow, 1).toString(), dateFormat);
            LocalDate departureDate = LocalDate.parse(reservesModel.getValueAt(reserveRow, 2).toString(), dateFormat);

            long hostedDays = entryDate.until(departureDate, ChronoUnit.DAYS);

            boolean haveRegistration = false;
            for (int i = 0; i < reservesModel.getRowCount(); i++) {
                if (guestsModel.getValueAt(reserveRow, 1).toString().equals(cpf)) {
                    haveRegistration = true;
                    break;
                }
            }

            int accommodationNumber = Integer.parseInt(reservesModel.getValueAt(reserveRow, 4).toString().replaceAll("\\D", ""));

            int accommodationRow = 0;
            for (accommodationRow = 0; accommodationRow < accommodationsModel.getRowCount(); accommodationRow++) {
                int number = Integer.parseInt(accommodationsModel.getValueAt(accommodationRow, 0).toString());

                if (number == accommodationNumber) {
                    break;
                }
            }

            double cost = Double.parseDouble(accommodationsModel.getValueAt(accommodationRow, 2).toString());

            JOptionPane.showMessageDialog(null, "Você ficou hospedado por " + hostedDays + " dias." + (haveRegistration ? " Como é um cliente que possui registo em nosso sistema, você possui 20% de desconto!" : "") + " Com o preço da diária de sua acomodação sendo R$" + cost + ", o valor total a ser pago é de R$" + cost * hostedDays * (haveRegistration ? 0.8 : 1) + ".", "Check-out", JOptionPane.INFORMATION_MESSAGE);

            // Mudando dados locais
            accommodationsModel.setValueAt("livre", accommodationRow, 4);
            reservesModel.setValueAt(true, reserveRow, 5);

            // Mudando dados no servidor
            Connection connection = null;
            Statement statement = null;
            ResultSet resultSet = null;
            String query = "";

            try {
                Class.forName("org.postgresql.Driver");
                System.out.println("Driver OK");
            } catch (Exception e) {
                System.out.println(e);
                return;
            }

            try {
                connection = DriverManager.getConnection(url, username, password);
                statement = connection.createStatement();

                // Reserva
                query = "UPDATE reserve SET checkOut = true WHERE cpf = '" + cpf + "'";
                statement.executeUpdate(query);

                // Acomodação
                query = "UPDATE accommodation SET status = 'livre' WHERE number = " + accommodationNumber;
                statement.executeUpdate(query);
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            } finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }
                    if (statement != null) {
                        statement.close();
                    }
                } catch (SQLException ex) {
                    System.err.println(ex.getMessage());
                }
            }
            
            resetCheckOutPanelFields();
            tabbedPanel.setSelectedIndex(0);
        } catch (Exception error) {
            JOptionPane.showMessageDialog(null, error.getMessage(), "Ooops!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void spnGuestsNumberStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnGuestsNumberStateChanged
        DefaultTableModel accommodationsModel = (DefaultTableModel) tblAccommodations.getModel();
        DefaultTableModel reservesModel = (DefaultTableModel) tblReserves.getModel();

        cmbAccomodationNumber.removeAllItems();

        int guestsQuantity = Integer.parseInt(spnGuestsNumber.getValue().toString());
        LocalDate entryDate = ((Date) spnEntryDate.getValue()).toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate departureDate = ((Date) spnDepartureDate.getValue()).toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        for (int i = 0; i < accommodationsModel.getRowCount(); i++) {
            int capacity = (int) accommodationsModel.getValueAt(i, 3);

            if (capacity >= guestsQuantity) {
                boolean canReserve = true;
                
                for (int j = 0; j < reservesModel.getRowCount(); j++) {
                    LocalDate storedEntryDate = LocalDate.parse(reservesModel.getValueAt(j, 1).toString(), dateFormat);
                    LocalDate storedDepartureDate = LocalDate.parse(reservesModel.getValueAt(j, 2).toString(), dateFormat);
                    
                    if (departureDate.isAfter(storedEntryDate) && entryDate.isBefore(storedDepartureDate)) {
                        canReserve = false;
                        break;
                    }
                }
                
                if(canReserve)
                    cmbAccomodationNumber.addItem("Quarto número " + accommodationsModel.getValueAt(i, 0));
            }
        }
        /*

        if (cmbAccomodationNumber.getItemCount() == 0) {
            JOptionPane.showMessageDialog(null, "Desculpe, não possuimos acomodações livres que comportam a quantidade de pessoas informada.", "Ooops!", JOptionPane.ERROR_MESSAGE);
        }
        */
    }//GEN-LAST:event_spnGuestsNumberStateChanged

    private void pnlAccommodationsComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlAccommodationsComponentShown
        resetAccommodationsPanelFields();
    }//GEN-LAST:event_pnlAccommodationsComponentShown

    private void pnlGuestsComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlGuestsComponentShown
        resetGuestsPanelFields();
    }//GEN-LAST:event_pnlGuestsComponentShown

    private void pnlReservesComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlReservesComponentShown
        resetReservesPanelFields();
    }//GEN-LAST:event_pnlReservesComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HotelInfernava.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HotelInfernava.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HotelInfernava.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HotelInfernava.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HotelInfernava().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbout;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnSaveAccommodation;
    private javax.swing.JButton btnSaveGuest;
    private javax.swing.JButton btnSaveReserve;
    private javax.swing.JComboBox<String> cmbAccomodationNumber;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JDialog dialogAbout;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAccomodationNumber;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCapacity;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblCost;
    private javax.swing.JLabel lblCpfCheckOut;
    private javax.swing.JLabel lblCpfGuest;
    private javax.swing.JLabel lblCpfReserve;
    private javax.swing.JLabel lblDepartureDate;
    private javax.swing.JLabel lblEntryDate;
    private javax.swing.JLabel lblGuestsNumber;
    private javax.swing.JLabel lblHotelName;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JLabel lblSlogan;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlAccommodations;
    private javax.swing.JPanel pnlCheckOut;
    private javax.swing.JPanel pnlGuests;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlReserves;
    private javax.swing.JSpinner spnAge;
    private javax.swing.JSpinner spnCapacity;
    private javax.swing.JSpinner spnCost;
    private javax.swing.JSpinner spnDepartureDate;
    private javax.swing.JSpinner spnEntryDate;
    private javax.swing.JSpinner spnGuestsNumber;
    private javax.swing.JSpinner spnNumber;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JTable tblAccommodations;
    private javax.swing.JTable tblGuests;
    private javax.swing.JTable tblReserves;
    private javax.swing.JTextField txtCpfCheckOut;
    private javax.swing.JTextField txtCpfGuest;
    private javax.swing.JTextField txtCpfReserve;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
